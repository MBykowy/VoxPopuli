**Project Title:** Online Survey Platform (System Ankiet Online) - Concise & Complete Plan

**Core Goal:** Develop an ASP.NET Core MVC application allowing users to create, share, and respond to online surveys, with results visualized in charts. Aim for robust functionality and code volume (LoC).

**Technology Stack:**
*   **Backend:** ASP.NET Core 8 (MVC)
*   **Database:** SQL Server (LocalDB/Express)
*   **ORM:** Entity Framework Core 8
*   **Authentication:** ASP.NET Core Identity
*   **Frontend UI:** Bootstrap 5
*   **Charting:** Chart.js
*   **Testing:** xUnit, Moq
*   **Logging:** Serilog
*   **Mapping:** AutoMapper
*   **Validation:** Data Annotations (consider FluentValidation for advanced needs)

**File Structure Outline:**
*   `src/OnlineSurveyPlatform.WebApp/`: Main project.
    *   `wwwroot/`: Static assets (CSS, JS, libs).
    *   `Controllers/`: MVC Controllers.
    *   `Data/`: `ApplicationDbContext`, Migrations, `DbInitializer`.
    *   `Models/Domain/`: EF Core Entities (`ApplicationUser`, `Survey`, `Question`, `AnswerOption`, `Response`, `Answer`).
    *   `Models/ViewModels/`: View-specific models, grouped by feature.
    *   `Services/`: Optional business logic services.
    *   `Views/`: MVC Views, grouped by controller.
    *   `Mappings/`: AutoMapper profiles.
    *   `Program.cs`, `appsettings.json`.
*   `tests/OnlineSurveyPlatform.WebApp.Tests/`: Test project.

---

**Phase 1: Core Survey Definition & Management (CRUD)**

1.  **Domain Models (`Models/Domain/`):**
    *   Define: `Survey.cs`, `Question.cs` (with `QuestionType` enum), `AnswerOption.cs`, `Response.cs`, `Answer.cs`.
    *   Include properties for IDs, text, relationships (FKs, navigation props), dates, settings (e.g., `IsActive`, `AllowAnonymousResponses`, `PasswordHash` for `Survey`).
2.  **`ApplicationDbContext` Update:**
    *   Add `DbSet<>` properties for all new domain models.
    *   In `OnModelCreating()`, configure relationships (e.g., cascade delete behaviors, indices) and seed initial roles ("Admin", "User").
3.  **Database Migration:**
    *   Run `Add-Migration AddCoreSurveyEntities` and `Update-Database`.
4.  **ViewModels (`Models/ViewModels/Surveys/`):**
    *   Create: `SurveyCreateViewModel.cs`, `SurveyEditViewModel.cs` (inherits Create), `SurveyListViewModel.cs` (with `SurveyListItemViewModel`), `SurveyDetailsViewModel.cs`.
    *   These VMs should include `List<QuestionViewModel> Questions`.
    *   Create `QuestionViewModel.cs` and `AnswerOptionViewModel.cs` (include `IsMarkedForDeletion` flag for edits).
5.  **AutoMapper Profile (`Mappings/SurveyMappingProfile.cs`):**
    *   Create mappings between Domain Entities and ViewModels (e.g., `Survey` <-> `SurveyCreateViewModel`, `Question` <-> `QuestionViewModel`).
6.  **`SurveysController.cs`:**
    *   Inject `ApplicationDbContext`, `IMapper`, `UserManager<ApplicationUser>`, `ILogger`. Use `[Authorize]`.
    *   **`Index`**: List surveys created by the current user.
    *   **`Create` (GET)**: Return view with `SurveyCreateViewModel` (can pre-populate one empty question).
    *   **`Create` (POST)**:
        *   Validate `SurveyCreateViewModel`.
        *   Map VM to `Survey` entity. Set `CreatorUserId`, `CreatedAt`. Hash password if provided.
        *   Iterate `viewModel.Questions`, map to `Question` entities, and then their `AnswerOptions`. Add to `Survey`.
        *   Save to DB. Redirect.
    *   **`Details` (GET)**: Fetch survey with questions/options, map to `SurveyDetailsViewModel`. Authorize creator/admin.
    *   **`Edit` (GET)**: Fetch survey with questions/options, map to `SurveyEditViewModel`. Authorize creator.
    *   **`Edit` (POST)**:
        *   Validate `SurveyEditViewModel`. Fetch existing `Survey` by ID and `CreatorUserId`.
        *   Map scalar properties from VM to entity. Update `LastModifiedAt`. Re-hash password if changed.
        *   **Crucial/Complex Logic:** Update `Questions` and `AnswerOptions` collections:
            *   Identify new, updated, and deleted items (use `QuestionId`/`AnswerOptionId` and `IsMarkedForDeletion` from VM).
            *   Add new entities. Update existing entities. Remove deleted entities from context.
        *   Save changes. Redirect.
    *   **`Delete` (GET)**: Confirmation view. Fetch survey details. Authorize creator.
    *   **`DeleteConfirmed` (POST)**: Fetch survey, remove from context, save changes. Authorize creator.
7.  **Survey Views (`Views/Surveys/`):**
    *   Create `Index.cshtml`, `Create.cshtml`, `Edit.cshtml`, `Details.cshtml`, `Delete.cshtml`.
    *   Use Bootstrap for styling. Use Tag Helpers and validation summary.
    *   `Create.cshtml` & `Edit.cshtml` require dynamic form sections for questions/options.
8.  **Client-Side JavaScript (`wwwroot/js/survey-editor.js` or `site.js`):**
    *   Functions to dynamically add/remove question blocks and answer option inputs.
    *   Manage input `name` attributes for correct MVC model binding (e.g., `Questions[index].PropertyName`).
    *   Handle showing/hiding option inputs based on `QuestionType`.
    *   Set `IsMarkedForDeletion` hidden fields for items removed on client-side during Edit.

---

**Phase 2: Survey Participation & Result Visualization**

1.  **ViewModels (`Models/ViewModels/Responses/` & `Surveys/`):**
    *   `TakeSurveyViewModel.cs`: Contains `SurveyId`, `SurveyTitle`, `List<QuestionViewModel>` (for display), and a structure to bind submitted answers (e.g., `Dictionary<int_questionId, string_answerValue>` or `List<AnswerSubmissionViewModel>`).
    *   `SurveyResultViewModel.cs`: Contains survey details and aggregated `QuestionResultViewModel`s.
    *   `QuestionResultViewModel.cs`: Contains question text and `List<OptionResultViewModel>` (option text, vote count, percentage).
    *   `ChartDataViewModel.cs`: Structure to hold labels and data series for Chart.js.
2.  **AutoMapper Profile Updates:**
    *   Add mappings for response/result related ViewModels if needed.
3.  **`ResponsesController.cs`:**
    *   Inject dependencies.
    *   **`Take` (GET `Responses/Take/{surveyId}`)**:
        *   Fetch `Survey` with `Questions` and `AnswerOptions`.
        *   Check survey availability (active, dates, password if set).
        *   Prevent access if user already responded (if not anonymous and configured).
        *   Map to `TakeSurveyViewModel`.
    *   **`Take` (POST)**:
        *   Receive `TakeSurveyViewModel` or bind submitted form data. Validate.
        *   Create `Response` entity (link to `SurveyId`, `RespondentUserId` if logged in, IP/UserAgent).
        *   Iterate submitted answers: Create `Answer` entities (link to `Response`, `QuestionId`, `SelectedOptionId` or `AnswerText`, `RatingValue`).
        *   Save `Response` and `Answers` to DB.
        *   Redirect to "Thank You" page.
    *   **`ThankYou` (GET)**: Simple confirmation page.
4.  **`SurveysController.cs` - Results Action:**
    *   **`Results` (GET `Surveys/Results/{surveyId}`)**:
        *   Authorize survey creator or admin. Fetch `Survey`.
        *   **Aggregation Logic:** Query `Answers` for the survey. Group by `QuestionId` and then by `SelectedAnswerOptionId` (for choice questions) or analyze `AnswerText`/`RatingValue`. Calculate counts and percentages.
        *   Map aggregated data to `SurveyResultViewModel` (including data for charts).
5.  **Views (`Views/Responses/` & `Views/Surveys/`):**
    *   `Take.cshtml`: Display survey questions and input fields (radio, checkbox, textarea, rating).
    *   `ThankYou.cshtml`.
    *   `Results.cshtml`: Display aggregated results. Include `<canvas>` elements for charts.
6.  **Charting (`Results.cshtml` & JS):**
    *   Embed aggregated chart data (e.g., via `@Html.Raw(Json.Serialize(Model.ChartData))`) or fetch via a separate API endpoint.
    *   Use JavaScript (Chart.js) to initialize and render charts (Bar, Pie, Donut) based on the data.

---

**Phase 3: Feature Enhancements (Increases Functionality & LoC)**

1.  **Advanced Question Types:**
    *   Extend `QuestionType` enum (e.g., `RatingScale`, `OpenText` - already included, but ensure full implementation).
    *   Update `Answer.cs` if new fields are needed (e.g., `RatingValue`). Migrate DB.
    *   Update `Take.cshtml` to render new input types.
    *   Update `ResponsesController` `Take` (POST) to save data for new types.
    *   Update `Results.cshtml` and aggregation logic to display results for new types (e.g., list open text answers, show average rating).
2.  **Advanced Survey Settings:**
    *   Add fields to `Survey.cs` (e.g., `StartDate`, `EndDate`, `MaxResponses`). Migrate DB.
    *   Update `SurveyCreate/EditViewModel` and `Create/Edit.cshtml` with form fields for these settings.
    *   Update `SurveysController` Create/Edit POST actions to save settings.
    *   Update `ResponsesController` `Take` (GET) to enforce these settings (e.g., check dates, response count).
3.  **User Profile Page:**
    *   Allow users to view/edit basic profile info (managed by ASP.NET Core Identity, requires scaffolding Identity pages or custom controller).
4.  **Survey Search & Filtering (on a public listing or "My Surveys"):**
    *   Add search input and filter dropdowns to survey listing views.
    *   Update `SurveysController` `Index` (or new `PublicList` action) to accept search/filter parameters and modify DB query accordingly.
5.  **Export Results:**
    *   Add "Export to CSV" button on `Results.cshtml`.
    *   Create an action in `SurveysController` to generate and return a CSV file of survey responses/results.
6.  **Email Notifications (Optional, adds LoC):**
    *   On new response, email survey creator (requires email service setup, e.g., SendGrid, and background task or direct send).
    *   Email confirmation for registration (ASP.NET Core Identity can handle this).

---

**Phase 4: Administration, Quality, Testing & Finalization**

1.  **Admin Panel (`AdminController.cs`, `Views/Admin/`):**
    *   Use `[Authorize(Roles = "Admin")]`. Seed "Admin" role and an admin user.
    *   **User Management:** List users, view details, edit roles, disable/enable accounts (using `UserManager`, `RoleManager`). Create `UserManagementViewModel`.
    *   **Survey Management:** List all surveys, view details, edit any survey, delete any survey.
    *   **System Statistics:** Basic dashboard (total users, surveys, responses).
2.  **Unit & Integration Testing (`OnlineSurveyPlatform.WebApp.Tests/`):**
    *   **Unit Tests (xUnit, Moq):**
        *   Test controller action logic (mock DbContext, UserManager, IMapper, ILogger).
        *   Test any service layer logic.
        *   Test ViewModel validation logic if complex.
    *   **Integration Tests (xUnit, `WebApplicationFactory<Program>`, EF Core In-Memory provider or Test DB):**
        *   Test full request pipeline for key scenarios (CRUD, survey submission, result aggregation).
        *   Verify database interactions.
3.  **Robust Logging & Error Handling:**
    *   Ensure Serilog is used effectively throughout controllers and services. Log key events, parameters, and errors.
    *   Configure custom error pages (`UseExceptionHandler`, `UseStatusCodePagesWithReExecute`). Customize `Views/Shared/Error.cshtml`.
4.  **Security Hardening:**
    *   Ensure Anti-Forgery Tokens are used on all POST forms.
    *   Parameterized queries (EF Core default).
    *   Input validation (client & server-side).
    *   Review for XSS, CSRF vulnerabilities. Use appropriate HTTP headers.
    *   Regularly update NuGet packages.
5.  **Code Quality & Documentation:**
    *   Refactor for clarity and maintainability (SOLID principles where applicable).
    *   Add XML documentation comments (`/// <summary>`) to public classes and methods.
    *   Consistent styling and naming conventions.
6.  **Data Seeding (`Data/DbInitializer.cs` - Optional):**
    *   Create a class to seed initial data (admin user, sample surveys) if `Program.cs` becomes too cluttered or more complex seeding is needed. Call from `Program.cs`.

Target file structure:
```
/OnlineSurveyPlatform.sln               # Solution File
└─── src/                               # Source Code Directory
     └─── OnlineSurveyPlatform.WebApp/   # Main ASP.NET Core MVC Project
          ├── wwwroot/                   # Static files (client-side assets)
          │   ├── css/
          │   │   └─── site.css          # Main custom stylesheet
          │   │   └─── (bootstrap.min.css if not using CDN)
          │   ├── js/
          │   │   └─── site.js           # Main custom JavaScript
          │   │   └─── survey-editor.js  # JS for dynamic survey creation/editing
          │   │   └─── (bootstrap.bundle.min.js if not using CDN)
          │   │   └─── (chart.umd.js if not using CDN)
          │   └─── lib/                   # Third-party client-side libraries (if managed by LibMan)
          │       ├── bootstrap/
          │       └─── chart.js/
          │       └─── jquery/            # If needed
          │
          ├── Areas/                     # For larger feature areas, e.g., Identity UI
          │   └─── Identity/
          │        └─── Pages/
          │             └─── Account/     # Scaffolded/customized Identity pages (Register, Login, etc.)
          │
          ├── Controllers/               # MVC Controllers
          │   ├── HomeController.cs      # Handles home page, error page
          │   ├── AccountController.cs   # Handles custom login/logout/profile actions (if not fully relying on Identity pages)
          │   ├── SurveysController.cs    # CRUD for Surveys, Survey Results
          │   ├── QuestionsController.cs # Potentially for AJAX operations related to questions (optional)
          │   ├── ResponsesController.cs # Handles survey taking/submission
          │   └─── AdminController.cs     # For administrative functionalities
          │
          ├── Data/                      # Data Access Layer components
          │   ├── ApplicationDbContext.cs # Main Entity Framework Core DbContext
          │   ├── Migrations/            # EF Core generated migration files
          │   └─── DbInitializer.cs       # Optional: For seeding initial database data (roles, admin user, etc.)
          │
          ├── Mappings/                  # AutoMapper Profiles
          │   └─── SurveyMappingProfile.cs
          │   └─── ResponseMappingProfile.cs
          │   └─── UserMappingProfile.cs  # For admin user management
          │
          ├── Models/                    # Data models
          │   ├── Domain/                # Core EF Core Entities
          │   │   ├── ApplicationUser.cs # Custom user class extending IdentityUser
          │   │   ├── Survey.cs
          │   │   ├── Question.cs
          │   │   ├── QuestionType.cs    # Enum for question types
          │   │   ├── AnswerOption.cs
          │   │   ├── Response.cs
          │   │   └─── Answer.cs
          │   │
          │   └─── ViewModels/            # Models specifically for Views (Data Transfer Objects for UI)
          │        ├── Account/
          │        │   ├── RegisterViewModel.cs
          │        │   ├── LoginViewModel.cs
          │        │   └─── UserProfileViewModel.cs
          │        ├── Surveys/
          │        │   ├── SurveyCreateViewModel.cs
          │        │   ├── SurveyEditViewModel.cs
          │        │   ├── SurveyListViewModel.cs
          │        │   ├── SurveyListItemViewModel.cs
          │        │   ├── SurveyDetailsViewModel.cs
          │        │   ├── SurveyResultViewModel.cs
          │        │   ├── QuestionResultViewModel.cs
          │        │   ├── OptionResultViewModel.cs
          │        │   └─── ChartDataViewModel.cs
          │        ├── Questions/         # ViewModels for question parts if complex enough
          │        │   ├── QuestionViewModel.cs
          │        │   └─── AnswerOptionViewModel.cs
          │        ├── Responses/
          │        │   ├── TakeSurveyViewModel.cs
          │        │   └─── AnswerSubmissionViewModel.cs # If needed for complex answer binding
          │        ├── Admin/
          │        │   ├── UserManagementViewModel.cs
          │        │   ├── RoleViewModel.cs
          │        │   └─── SystemStatsViewModel.cs
          │        └─── ErrorViewModel.cs
          │
          ├── Services/                  # Optional: Business logic services (interfaces and implementations)
          │   ├── Interfaces/
          │   │   ├── ISurveyService.cs
          │   │   ├── IResponseService.cs
          │   │   ├── IChartService.cs
          │   │   └─── IEmailService.cs  # If email notifications are implemented
          │   ├── SurveyService.cs
          │   ├── ResponseService.cs
          │   ├── ChartService.cs
          │   └─── EmailService.cs
          │
          ├── Views/                     # MVC Views (.cshtml files)
          │   ├── Account/               # Views for AccountController actions
          │   ├── Admin/                 # Views for AdminController actions
          │   ├── Home/                  # Index, Privacy, Error views
          │   ├── Responses/             # Take, ThankYou views
          │   ├── Surveys/               # Index, Create, Edit, Details, Delete, Results views
          │   └─── Shared/                # Shared layout, partial views, validation scripts
          │        ├── _Layout.cshtml
          │        ├── _ValidationScriptsPartial.cshtml
          │        ├── _LoginPartial.cshtml
          │        ├── Error.cshtml
          │        └─── _QuestionEditorPartial.cshtml  # Partial for dynamic question form parts
          │        └─── _AnswerOptionEditorPartial.cshtml # Partial for dynamic option form parts
          │
          ├── Properties/
          │   └─── launchSettings.json
          │
          ├── appsettings.json
          ├── appsettings.Development.json
          ├── Program.cs                 # Main application entry point and service configuration
          └─── OnlineSurveyPlatform.WebApp.csproj # Project file
└─── tests/                               # Test Projects Directory
     └─── OnlineSurveyPlatform.WebApp.Tests/ # Unit and Integration tests for the WebApp
          ├── Controllers/               # Tests for controllers
          ├── Services/                  # Tests for services
          ├── OnlineSurveyPlatform.WebApp.Tests.csproj # Test project file
          └─── (other test specific folders...)

```

**Explanation of Key Folders:**

*   **`src/OnlineSurveyPlatform.WebApp/`**: The primary ASP.NET Core project.
    *   **`wwwroot/`**: For all static client-side files. Browsers can access these directly.
    *   **`Areas/`**: Useful for organizing large features that have their own controllers, views, and models. ASP.NET Core Identity often scaffolds its UI here.
    *   **`Controllers/`**: Contains your MVC controller classes that handle incoming requests and orchestrate responses.
    *   **`Data/`**: Everything related to data persistence. Your `DbContext`, EF Core migrations, and any data seeding logic.
    *   **`Mappings/`**: A dedicated place for AutoMapper profiles, keeping mapping logic separate.
    *   **`Models/`**:
        *   **`Domain/`**: Your core business entities that EF Core maps to the database. These should be POCOs (Plain Old CLR Objects).
        *   **`ViewModels/`**: Classes specifically designed to pass data to and from your Views. They help decouple your domain models from your UI and can include UI-specific logic like data annotations for validation. Grouping them by feature/controller improves organization.
    *   **`Services/`**: (Optional but recommended for larger applications or to increase LoC meaningfully) Contains business logic that doesn't fit neatly into a controller or domain model. Uses interfaces for better testability and DI.
    *   **`Views/`**: Contains the Razor `.cshtml` files that render the UI. Organized by controller name, with a `Shared` folder for common layouts and partial views.
*   **`tests/OnlineSurveyPlatform.WebApp.Tests/`**: A separate project for your unit and integration tests. Keeping tests separate from the main application code is standard practice.
